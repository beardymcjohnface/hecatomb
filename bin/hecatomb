#!/usr/bin/env python

"""

Command-line interface for installing and running hecatomb.

Michael Roach, Jan 2020

"""

import argparse
import sys
import os
import subprocess
import pathlib
import time
from shutil import copyfile
from subprocess import call


sys.stderr.write("\nHecatomb v0.1.0\n\n")


# parse the command line arguments
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog='''
HELP:
Download and install the Databases (you only have to do this once): 
hecatomb install

Run hecatomb:
hecatomb run --reads fastq/

To run hecatomb on a HPC cluster (slurm or sge):
hecatomb [install/run] --cluster slurm

The Hecatomb pipeline is powered by Snakemake; pass additional arguments to Snakemake like so:
hecatomb [install/run] --snake=--dry-run
hecatomb [install/run] --snake=--unlock --snake=--touch
hecatomb [install/run] --snake="--force --cleanup-metadata seqtable.fasta"
'''
)
parser.add_argument('command', choices=['install', 'run', 'addHost'])
parser.add_argument('--reads', help='Directory containing seq data')
parser.add_argument('--host', help='Host name for contaminant removal', default='human')
parser.add_argument('--hostfasta', help='Host reference (when adding a new host genome)')
parser.add_argument('--entropy', help='Host masking entropy (when adding a new host genome', default='0.7')
parser.add_argument('--cluster', choices=['slurm', 'sge'])
parser.add_argument('--snake',
                    help='Pass one or more commands to Snakemake e.g. --snake=--unlock',
                    action='append')
args = parser.parse_args()


# directories of hecatombs installation etc
BINDIR = os.path.dirname(os.path.realpath(__file__))
SNEKDIR = os.path.normpath(os.path.join(BINDIR, '../snakemake'))
CONDDIR = os.path.normpath(os.path.join(SNEKDIR, 'conda'))
DBDIR = os.path.normpath(os.path.join(BINDIR, '../databases'))
EDITOR = os.environ.get('EDITOR','nano')


# database file config
confFile = os.path.normpath(os.path.join(SNEKDIR, 'config/database_config.yaml'))


# Snakemake run command + additional args
runSnake = f'snakemake --use-conda --conda-frontend mamba --rerun-incomplete --nolock --conda-prefix {CONDDIR} --configfile {confFile} '
if args.snake:
    runSnake = runSnake + ' '.join(c for c in args.snake)


def initialiseCluster(cluster):
    """
    Initialise the slurm or sge profile yaml file for running hecatomb on a cluster
    :param cluster: args.cluster, either 'slurm' or 'sge'
    :return:
    """
    clustConf = os.path.expanduser(f'~/.config/snakemake/{args.cluster}/config.yaml')
    if pathlib.Path(clustConf).is_file():
        sys.stderr.write(f"Found {cluster} profile {clustConf}\n")
        sys.stderr.write(f'Update {cluster} profile before continuing? [y/N]: ')
        YN = input()
        if 'y' in YN or 'Y' in YN:
            call([EDITOR, clustConf])
    else:
        clustSampleConf = os.path.join(SNEKDIR, f'config/sample_{cluster}.yaml')
        clustConfDest = os.path.dirname(clustConf)
        pathlib.Path(clustConfDest).mkdir(parents=True, exist_ok=True)
        copyfile(clustSampleConf, clustConf)
        sys.stderr.write(f"Created a config.yaml profile for {args.cluster} in {clustConfDest}\n")
        sys.stderr.write("\n--------------------\n\n")
        f = open(clustConf, 'r')
        for line in f:
            sys.stderr.write(line)
        f.close()
        sys.stderr.write(f"\n\n--------------------\n\nEdit {cluster}.yaml in nano before continuing? [y/N]: ")
        YN = input()
        if 'y' in YN or 'Y' in YN:
            call([EDITOR, clustConf])


# Functions for installing and running hecatomb
def install():
    """
    The install function. This will run the download and install database snakemake pipeline.
    :return:
    """
    if args.cluster:
        runJobs = f'--profile {args.cluster}'
    else:
        runJobs = '-j 16'
    sys.stderr.write("Checking and downloading database files\n")
    snekFile = os.path.normpath(os.path.join(SNEKDIR, 'download_databases.smk'))
    runCommand = f'{runSnake} -s {snekFile} {runJobs}'
    if subprocess.call(runCommand.split())==0:
        sys.stderr.write("Database installation finished successfully\n")
    else:
        sys.stderr.write("ERROR: Database installation failed\n")


def run():
    """
    The run function. This will run the hecatome snakemake pipeline itself.
    :return:
    """
    if not args.reads:
        sys.stderr.write('ERROR: please specify the directory with sequencing reads with --reads')
        exit(1)
    sys.stderr.write("Running Hecatomb\n")
    snekFile = os.path.normpath(os.path.join(SNEKDIR, 'Snakefile'))
    if args.cluster:
        runJobs = f'--profile {args.cluster}'
    else:
        runJobs = '-j 16'
    runCommand = f'{runSnake} -s {snekFile} {runJobs} -C Reads={args.reads} Host={args.host}'
    if subprocess.call(runCommand.split()) == 0:
        sys.stderr.write("Hecatomb finished successfully\n")
    else:
        sys.stderr.write("ERROR: Hecatomb run failed\n")


def addHost():
    """
    Add a new host to the Hecatomb database
    :return:
    """
    if not args.hostfasta:
        sys.stderr.write('ERROR: Host fasta file required when adding new host genome\n')
        exit(1)
    sys.stderr.write('Adding new virus-masked host for use with hecatomb\n')
    if args.host == 'human':
        sys.stderr.write(f'Enter host name [{args.host}]:')
        host = input()
        host = host.rstrip()
        if host == '':
            host = args.host
    else:
        host = args.host
    snekFile = os.path.normpath(os.path.join(SNEKDIR, 'add_host.smk'))
    if args.cluster:
        runJobs = f'--profile {args.cluster}'
    else:
        runJobs = '-j 16'
    runCommand = f'{runSnake} -s {snekFile} {runJobs} -C HostFa={args.hostfasta} HostName={host} Entropy={args.entropy}'
    if subprocess.call(runCommand.split()) == 0:
        sys.stderr.write("Host genome successfully added\n")
    else:
        sys.stderr.write("Failed to add host genome\n")


# Run the program
if args.cluster:
    initialiseCluster(args.cluster)

commands = {'install':install, 'run':run, 'addHost':addHost}
commands[args.command]()

time.sleep(1)


