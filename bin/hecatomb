#!/usr/bin/env python

"""

Command-line interface for installing and running hecatomb.

Michael Roach, Jan 2020

"""

import argparse
import sys
import os
import subprocess
import pathlib
import time
from shutil import copyfile
from subprocess import call


sys.stderr.write("\nHecatomb v0.1.0\n\n")


# parse the command line arguments
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog='''
HELP:
Download and install the Databases (you only have to do this once): 
hecatomb install

To run hecatomb, first create a template config file:
hecatomb config

Then, edit the config file and run hecatomb:
hecatomb run

To run hecatomb on a HPC cluster (slurm or sge):
hecatomb [install/run] --cluster slurm

The Hecatomb pipeline is powered by Snakemake; pass additional arguments to Snakemake like so:
hecatomb [install/run] --snake=--dry-run
hecatomb [install/run] --snake=--unlock --snake="--report out.html" --snake=--touch
hecatomb [install/run] --snake="--force --cleanup-metadata seqtable.fasta"
'''
)
parser.add_argument('command', choices=['install', 'config', 'run'])
parser.add_argument('--config', help='Config file name', default='config.yaml')
parser.add_argument('--cluster', choices=['slurm', 'sge'])
parser.add_argument('--snake',
                    help='Pass one or more commands to Snakemake e.g. --snake=--unlock',
                    action='append')
args = parser.parse_args()


# Snakemake run command + additional args
runSnake = 'snakemake '
if args.snake:
    runSnake = runSnake + ' '.join(c for c in args.snake)


# directories of hecatombs installation etc
BINDIR = os.path.dirname(os.path.realpath(__file__))
SNEKDIR = os.path.normpath(os.path.join(BINDIR, '../snakemake'))
DBDIR = os.path.normpath(os.path.join(BINDIR, '../databases'))
EDITOR = os.environ.get('EDITOR','nano')


def initialiseCluster(cluster):
    """
    Initialise the slurm or sge profile yaml file for running hecatomb on a cluster
    :param cluster: args.cluster, either 'slurm' or 'sge'
    :return:
    """
    clustConf = os.path.join(f'~/.config/snakemake/{args.cluster}/config.yaml')
    if pathlib.Path(clustConf).is_file():
        sys.stderr.write(f"Found {cluster} profile {clustConf}\n")
        sys.stderr.write(f'Do you need to update the {cluster} profile before continuing? [y/N]: ')
        YN = input()
        if 'y' in YN or 'Y' in YN:
            call([EDITOR, clustConf])
    else:
        clustSampleConf = os.path.join(SNEKDIR, f'config/sample_{cluster}.yaml')
        copyfile(clustSampleConf, clustConf)
        sys.stderr.write(f"Created a {cluster}.yaml profile in {SNEKDIR}\n")
        sys.stderr.write("\n--------------------\n\n")
        f = open(clustConf, 'r')
        for line in f:
            sys.stderr.write(line)
        f.close()
        sys.stderr.write(f"\n\n--------------------\n\nEdit {cluster}.yaml in nano before continuing? [y/N]: ")
        YN = input()
        if 'y' in YN or 'Y' in YN:
            call([EDITOR, clustConf])


# Functions for installing and running hecatomb
def install():
    """
    The install function. This will run the download and install database snakemake pipeline.
    :return:
    """
    if args.cluster:
        runJobs = f'--profile {args.cluster}'
    else:
        runJobs = '-j 16'
    sys.stderr.write("Checking and downloading database files\n")
    snekFile = os.path.normpath(os.path.join(SNEKDIR, 'download_databases.smk'))
    confFile = os.path.normpath(os.path.join(SNEKDIR, 'config/install_config.yaml'))
    runCommand = f'{runSnake} -s {snekFile} {runJobs} --configfile {confFile} --config db={DBDIR} tmp=tmp'
    if subprocess.call(runCommand.split())==0:
        sys.stderr.write("Database installation finished successfully\n")
    else:
        sys.stderr.write("ERROR: Database installation failed\n")


def config():
    """
    The config function. This will simply copy the template config file to the working directory with
    paths to database files etc. properly resolved.
    :return:
    """
    sampleConfig = os.path.normpath(os.path.join(SNEKDIR, 'config/sample_config.yaml'))
    if pathlib.Path(args.config).is_file():
        sys.stderr.write(f'Found config file {args.config}\n')
    else:
        sys.stderr.write("Generating a configuration file\n")
        time.sleep(1)
        copyfile(sampleConfig, args.config)
        sys.stderr.write(f'created template config file {args.config}\n')
    sys.stderr.write("\n--------------------\n")
    f = open(args.config, 'r')
    for line in f:
        sys.stderr.write(line)
    f.close()
    sys.stderr.write(f"\n--------------------\n\nEdit config file in nano before continuing? [y/N]: ")
    YN = input()
    if 'y' in YN or 'Y' in YN:
        call([EDITOR, args.config])
    sys.stderr.write("\nConfiguration file created!\nReplace 'test_data/fastq' with the directory containing your " \
                     "sequencing data.\nSequencing read files should be named like so: {sample}_{R1/R2}.fastq.gz\n\n")


def run():
    """
    The run function. This will run the hecatome snakemake pipeline itself.
    :return:
    """
    if pathlib.Path(args.config).is_file():
        sys.stderr.write("Running Hecatomb\n")
        snekFile = os.path.normpath(os.path.join(SNEKDIR, 'Snakefile'))
        if args.cluster:
            runJobs = f'--profile {args.cluster}'
        else:
            runJobs = '-j 16'
        runCommand = f'{runSnake} -s {snekFile} {runJobs} --configfile {args.config} --config Databases={DBDIR}'
        if subprocess.call(runCommand.split()) == 0:
            sys.stderr.write("Hecatomb finished successfully\n")
        else:
            sys.stderr.write("ERROR: Hecatomb run failed\n")
    else:
        sys.stderr.write(f'ERROR: missing configuration file {args.config}. Please run "hecatomb config" to ' \
                         f'create a configuration file.\n')


# Run the program
if args.cluster:
    initialiseCluster(args.cluster)

commands = {'install':install, 'config':config, 'run':run}
commands[args.command]()

time.sleep(1)


